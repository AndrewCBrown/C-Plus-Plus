Using the BST Tree provided

Extend the Binary Search Tree ADT to include the member function LeafCount that returns the number of leaf nodes in the tree.

Extend the Binary Search Tree ADT to include the member function SingleParentCount that returns the number of nodes in the tree that have only one child.

Extend the Binary Search Tree ADT to include a Boolean function SimilarTrees that receives pointers to two binary trees and determines whether the shapes of the trees are the same. (The nodes do not have to contain the same values, but each node must have the same number of children.) Write the declaration of the function SimilarTrees as a TreeType member function. Include adequate comments.

Write a client function that returns a count of the nodes that contain a value less than the parameter value.

Write a client function MakeTree that creates a binary search tree from the elements in a sorted list of integers. You cannot traverse the list inserting the elements in order, as that would produce a tree that has N levels. You must create a tree with at most log2N + 1 levels.

Write a client Boolean function MatchingItems that determines whether a binary search tree and a sequential list contain the same values.

After writing the 3 new member functions and 3 new client functions, create a driver program that uses each of the functions and shows that it works correctly.

LeafCount:
Traverse the tree
If a node's left and right child are both null, we add one to our counter (Probably something passed by reference so we can just increment it)(or just return 0 or 1 and add them all together)
End traversal

SingleParentCount:
Traverse the tree
If a node has a null left child and non-null right child, or a non-null left child and a null right child, add to a counter.
End traversal

SimilarTrees:
Traverse the trees simultaneously (if not possible just do one, then do the other.)
Compare each node at a time on whether it 0.has no children, 1.has a left child only, 2.has a right child only, 3.has both children.
As soon as you get different numbers in one spot you can know they are different and be done.

NumberOfNodesLessThan:
Traverse the tree
If the value at the node is less than the parameter passed, add one to a counter.
End traversal

MakeTree:
Recursively add the middle element to the tree, then call the left, then call the right.

MatchingItems:
Traverse the sequential list.
At each elememt call the function to find if it's in the tree.
If you ever get the result that it's not in the tree you can be done, or you keep going until you verify they are all in the tree.


Test Driver trees:
tree_01: 5, 3, 2, 1, 4, 8, 7, 6, 9
tree_01 has 4 leaf nodes, and 2 single parents

tree_02: 14, 12, 11, 10, 13, 17, 16, 15, 18
tree_02 has 4 leaf nodes, and 2 single parents

tree_01 and tree_02 have the same structure.

tree_03: 5, 2, 1, 3, 4, 7, 6, 8, 9

tree_01 and tree_03 both have the same number of nodes, and single parents, but they do not have the same structure.

tree_04: 1, 2, 3, 4
tree_04 has 1 leaf node, and 3 single parents

list_01: 1, 2, 3, 4, 5, 6, 7, 8, 9
list_02: 1, 2, 3, 4, 5, 6, 7, 8, 10
list_03: 10, 11, 12, 13, 14, 15, 16, 17, 18
list_01 has the same items as tree_01
list_02 and list_03 do not have the same items as tree_01
